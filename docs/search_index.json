[
["ch6.html", "Chapter 6 Mapping and Spatial Analysis 6.1 Chapter Overview 6.2 Before You Begin 6.3 Geospatial Data 6.4 Importing Geospatial Data 6.5 Plotting 6.6 Manipulating Spatial Data 6.7 Analysis 6.8 Creating a Presentable Map 6.9 Other R Mapping Packages Exercise 6 6.10 Exercise 6 Bonus", " Chapter 6 Mapping and Spatial Analysis This chapter was contributed by Henry Hershey knitr::include_graphics(&quot;bear.jpg&quot;) Figure 6.1: Henry, you want to draw a picture to go here? 6.1 Chapter Overview R is a relatively under-used tool for creating Geographic Information Systems (GIS). Most people use ArcGIS, QGIS, or Google Earth to display and analyze spatial data. However, R can do much of what you might want to do in those programs, with the added benefit of allowing you to create a reproducible script file to share. Often times, workflows are difficult to replicate in GIS because of the point-click user interface. With R, anyone can replicate your geospatial analysis with your script file and data. In this chapter, you will learn the basics of: creating a GIS in R mapping parts of your GIS “selecting by attribute” (A.K.A.subset() or dplyr::filter() in R) manipulating spatial objects You will map and analyze data from a study tracking brown bear (Ursus arctos) movements (Kaczensky 1999). In Slovenia, a railroad connects the capitol Ljubljana with the coastal city of Koper, and passes right through brown bear country. You will use R to assess potential sites to build a hypothetical wildlife overpass so that bears can safely cross the railroad. It is worth mentioning that if you are left wanting more information about geospatial analysis in R after this brief introduction, a much more thorough and dedicated description is presented for free in Lovelace, Nowosad, and Muenchow (2018). 6.2 Before You Begin You should create a new directory and R script for your work in this chapter called Ch6.R and save it in the directory C:/Users/YOU/Documents/R-Book/Chapter6. Set your working directory to that location. Revisit the material in Sections 1.2 and 1.3 for more details on these steps. For this chapter, it will be helpful to have the data in your working directory. In the Data/Ch6 folder (see the instructions on acquiring the data files), you’ll find: a file named bear.csv, folders named railways, states, and SVN_adm, and an R script called points_to_line.R. Copy (or cut if you’d like) all of these files/folders from Data/Ch6 into your working directory. Mapping in R requires many packages. Install all of the following packages: install.packages( c(&quot;sp&quot;,&quot;rgdal&quot;,&quot;maptools&quot;, &quot;rgeos&quot;,&quot;raster&quot;,&quot;scales&quot;, &quot;adehabitatHR&quot;,&quot;dismo&quot;) ) You will need {dplyr} as well, if you did not install it already for Chapter 5. Rather than load all the packages at the top of the script (as is typically customary), this chapter will load and briefly describe each package immediately prior to using it for the first time. 6.3 Geospatial Data There are two types of geospatial data: vector and raster data. R is able to handle both, but for the sake of simplicity, this chapter will mostly deal with vector data. There are three types of vector data that you should be familiar with (Figure 6.2): A point is a pair of coordinates (x = longitude, y = latitude) that represent the location of some observed object or event A line is a path between two or more ordered points. The endpoints of a line are called vertices. A polygon is an area bounded by vertices that are connected in order. In a polygon, the first and last vertex are the same. In this first section, you will learn how to load these different types of data and create spatial objects that you can manipulate and visualize in R. Figure 6.2: The three basic types of GIS vector data 6.4 Importing Geospatial Data 6.4.1 .csv files Begin by loading in coordinate data from bear.csv and creating a points layer from them. The points are from a telemetry study that tracked brown bear movements in south western Slovenia for a period of about 10 years (Kaczensky 1999). Each observation in this data set represents what is called a relocation event - meaning a bear was detected again after it was initially tagged. The variables measured at each relocation event include a location, a time, and several other variables. bear = read.csv(&quot;bear.csv&quot;,stringsAsFactors = F) colnames(bear) ## [1] &quot;event.id&quot; &quot;visible&quot; ## [3] &quot;timestamp&quot; &quot;location.long&quot; ## [5] &quot;location.lat&quot; &quot;behavioural.classification&quot; ## [7] &quot;comments&quot; &quot;location.error.text&quot; ## [9] &quot;sensor.type&quot; &quot;individual.taxon.canonical.name&quot; ## [11] &quot;tag.local.identifier&quot; &quot;individual.local.identifier&quot; ## [13] &quot;study.name&quot; &quot;utm.easting&quot; ## [15] &quot;utm.northing&quot; &quot;utm.zone&quot; There are quite a few variables in these data that are extraneous, so just keep the bare necessities: the date and time a bear was relocated, the name of the observed bear, and the x and y coordinates of its relocation. Also, omit the observations that have an NA value for any of those variables with na.omit(): bear = na.omit(bear[,c(&quot;timestamp&quot;,&quot;tag.local.identifier&quot;, &quot;location.long&quot;,&quot;location.lat&quot;)]) colnames(bear) = c(&quot;timestamp&quot;,&quot;ID&quot;,&quot;x&quot;,&quot;y&quot;) head(bear) ## timestamp ID x y ## 1 1994-04-23 22-00-00 ancka 14.32837 45.88914 ## 2 1994-04-24 16-40-00 ancka 14.37175 45.87072 ## 3 1994-04-25 14-45-00 ancka 14.39852 45.86659 ## 4 1994-04-26 12-30-00 ancka 14.41215 45.88695 ## 5 1994-04-28 12-00-00 ancka 14.41260 45.87476 ## 6 1994-04-29 09-30-00 ancka 14.40471 45.88957 Notice that the bears have names: unique(bear$ID). Do some more simple data wrangling: # how many records of each bear are there? table(bear$ID) ## ## ancka clio dinko dusan ivan jana janko joze jure klemen ## 351 20 11 43 7 111 7 24 17 19 ## lucia maja metka milan mishko nejc polona srecko urosh vanja ## 169 247 66 3 129 117 208 138 21 65 ## vera vinko ## 92 33 # bears that were relocated fewer than 5 times # cannot be used in future analysis so filter them out library(dplyr) bear = bear %&gt;% group_by(ID) %&gt;% filter(n() &gt;= 5) # now how many bears are there? unique(bear$ID) ## [1] &quot;ancka&quot; &quot;clio&quot; &quot;dinko&quot; &quot;dusan&quot; &quot;ivan&quot; &quot;jana&quot; &quot;janko&quot; ## [8] &quot;joze&quot; &quot;jure&quot; &quot;klemen&quot; &quot;lucia&quot; &quot;maja&quot; &quot;metka&quot; &quot;mishko&quot; ## [15] &quot;nejc&quot; &quot;polona&quot; &quot;srecko&quot; &quot;urosh&quot; &quot;vanja&quot; &quot;vera&quot; &quot;vinko&quot; Now, use the {sp} package to create a spatial object out of your standard R data frame. You can think of this object like a layer in GIS. {sp} lets you create layers with or without attribute tables, but if your spatial data have other attributes like an ID or a timestamp variable, you should always create an object with class SpatialPointsDataFrame to make sure those variables/attributes are stored. In order to convert a data frame into a SpatialPointsDataFrame, you need to specify four arguments: data: the data frame being converted, coords: the coordinates in that dataframe, coords.nrs: the indices for those coordinate vectors in the data data.frame, and proj4string: the projected coordinate system of the data. You will use the WGS84 coordinate reference system. More on coordinate reference systems later in Section 6.6.11. library(sp) bear = SpatialPointsDataFrame( data = bear, coords = bear[,c(&quot;x&quot;,&quot;y&quot;)], coords.nrs = c(3,4), proj4string = CRS(&quot;+init=epsg:4326&quot;) ) Without any reference data these points are essentially useless. You will need to load some more spatial data to get your bearings. You have more spatial data, but they are in a different format. 6.4.2 .shp files The {rgdal} package facilitates loading spatial data files (i.e., shapefiles) into R. The function readOGR() takes a standard shapefile (.shp), and converts it into a the correct spatial object (e.g., points vs. polygons). It takes two arguments: the data source name (dsn, the directory), and the layer name (layer). When you download a shapefile from an open-source web portal, it will often have accompanying files that store the attribute data. Store all of these files in a folder with the same name as the shapefile. Now load in the shapefile that contains a polygon for the boundary of Slovenia (Boundaries 2018) from the directory, so you can see where in the country the brown bears were detected: #load all the shapefiles for the background map. #you&#39;ll learn how to add a basemap later library(rgdal) #border of slovenia slovenia = readOGR(dsn = &quot;./SVN_adm&quot;,layer = &quot;SVN_adm0&quot;) There are two important differences between readOGR() and read.csv(): The directory shortening syntax is not the same. Notice the period in the data source names. This indicates your working directory. When calling the layer name, the file extension .shp is not required. Notice the feature class of slovenia is a polygon: class(slovenia) ## [1] &quot;SpatialPolygonsDataFrame&quot; ## attr(,&quot;package&quot;) ## [1] &quot;sp&quot; Now read in two other shapefiles: one showing the statistical areas within Slovenia (Boundaries 2018) one showing the railways located in Slovenia (MapCruzin 2018) #major railroads in slovenia railways = readOGR(dsn = &quot;./railways&quot;, layer = &quot;railways&quot;) #statistical areas (states) stats = readOGR(dsn = &quot;./SVN_adm&quot;, layer = &quot;SVN_adm1&quot;, stringsAsFactors = F) 6.5 Plotting Plotting spatial objects in R is a breeze. See what happens if you just plot the bear object: plot(bear) You can clean up your map a bit with many of the standard {graphics} arguments: library(scales) par(mar = c(2,2,1,1)) plot(bear, col = alpha(&quot;blue&quot;, 0.5), pch = 16, axes = T) The alpha() function from the {scales} package allows you to plot with transparent colors, which is helpful for seeing the high- versus low-density clusters. Now, plot your reference layers to get your bearings: #make a map of all the bear relocations and railways in slovenia par(mar = c(2,2,1,1)) plot(stats, border = &quot;grey&quot;, axes = T) plot(slovenia, lwd = 3, add = T) # you can draw multiple plots on top points(bear, pch = 16, cex = 0.5, # or use a low lvl plot function col = alpha(&quot;blue&quot;, 0.5)) lines(railways, col = &quot;red&quot;, lwd = 3) 6.5.1 Zooming You may want to zoom in on the part of Slovenia where the bears are. Spatial objects in R have a slot2 called bbox which is the “boundary box” of the data in that object. You can use the bbox to specify what the xlim and ylim of your map should be: plot(stats, border = &quot;grey&quot;, axes = T, xlim = bear@bbox[1,], # access the boundary box using @ ylim = bear@bbox[2,]) plot(slovenia, lwd = 3, add = T) points(bear, pch = 16, cex = 0.5, col = alpha(&quot;blue&quot;, 0.5)) plot(railways, add = T, col = &quot;red&quot;, lwd = 3) 6.5.2 Plotting Selections In GIS, a subset is often called a selection: it is a smaller subset of your larger data layers. You may want to see the relocation events for each individual bear at a time. Use sapply() to apply a function to plot each bear’s detected movement trajectory on a separate map. Wrap your code inside of a new PDF device (described in Section 2.10.2) so you can scroll through the plots separately: pdf(&quot;Relocations.pdf&quot;, h = 5, w = 5) sapply(unique(bear$ID), function(id) { par(mar = c(2,2,1,1)) plot(stats, border = &quot;grey&quot;, axes = T, xlim = bear@bbox[1,], # access the boundary box using @ ylim = bear@bbox[2,], main = paste(&quot;Bear:&quot;, id)) plot(slovenia, lwd = 3, add = T) points(bear[bear$ID == id,], type = &quot;o&quot;, pch = 16, cex = 0.5, col = alpha(&quot;blue&quot;, 0.5)) plot(railways, add = T, col = &quot;red&quot;, lwd = 3) }) dev.off() When you run this code, it will look like nothing happened. Go to your working directory and open the newly created file Relocations.pdf to see the output. Note that if you want to make changes to the PDF file by running pdf(...); plot(...); dev.off(), you’ll need to close the file in your PDF viewer beforehand3. 6.6 Manipulating Spatial Data Now that you have some data and you’ve taken a look at it, it’s time to learn a few tricks for manipulating them. Looking at your map, see that some of the bears were detected outside of Slovenia. (Bonus points if you can name the country they’re in). Suppose the Slovenian government can’t build wildlife crossings in other countries, so you want to clip the bear data to the extent of Slovenia. 6.6.1 Changing the CRS Before you can manipulate any two related layers (e.g., clipping), you have to ensure that the two layers have identical coordinate systems. This can be done easily with the spTransform() function in the {sp} package. In order to obtain the coordinate reference system of a spatial object like bear, all you have to do is call proj4string(bear). You can pass this directly to spTransform() like this: slovenia = spTransform(slovenia, CRS(proj4string(bear))) 6.6.2 Clipping Clipping is as simple as a standard subset in R. You can select the relocations that occured only in Slovenia using: bear = bear[slovenia,] Make the same plot as you did in Section 6.5.1 6.6.3 Adding Attributes What if you wanted to add an attribute to a points object, like which polygon it occurs in? In order to figure out how many bear relocations were documented in each statistical region of Slovenia, you’ll have to merge the two objects. DOES SOMETHING ELSE GO HERE?? 6.7 Analysis Now that you know how to import, plot, and manipulate your data, it’s time to do some analysis. The {rgeos} package has a few tools for simple geometric calculations like finding the distance between two points, or the area of a polygon. However, more specialized analyses are often only available in other packages. One commonly used package in animal ecology is the {adehabitat} package suite. Use this package in conjunction with {rgeos} to determine where the tagged bears may have crossed the railroad. 6.7.1 Home Range Analysis If you look at the plots in Section 6.5.2, it looks like some bears live very close to the railroad, but do not cross it, some live very far away, and others may have crossed it multiple times. Which bears’ home ranges are intersected by the railroad? In order to determine this, you will have to calculate the home range of each animal with the mcp function in the {adehabitatHR} package. library(adehabitatHR) #the mcp function requires coordinates #be in the Universal Transverse Mercator system bear = spTransform(bear,CRS(&quot;+proj=utm +north +zone=33 +ellps=WGS84&quot;)) # calculate the home range. mcp is one of 5 functions to do this cp = mcp(xy=bear[,2], percent=95,unin=&quot;m&quot;,unout=&quot;km2&quot;) mcp calculates the minimum convex polygon bounded by the extent of the points which are within some percentile of closeness to the centroid of a group. Points that are very far away from the center are excluded. The standard percentile is 95%. mcp requires three other arguments: xy: the grouping variable of the spatial points data frame (the ID of each bear), unin: the units of the input (meters is the default), and unout: the units of the output. If you run cp, you’ll see that the areas of each polygon are stored in the object in square kilometers. Now, plot the homeranges of each bear, label them, and overlay the railroad on a map. #rgeos has a few nice functions for plotting and spatial transformations library(rgeos) #match the coordinate system of the home ranges object with the railways layer cp = spTransform(cp, CRS(proj4string(slovenia))) railways = spTransform(railways, CRS(proj4string(slovenia))) #keep only the homeranges that include some part of the railway cp = cp[railways,] # plot the polygons par(mar = c(2,2,1,1)) plot(cp,col=alpha(&quot;blue&quot;, 0.5), axes = T) #rgeos has a bunch of neat functions like this one polygonsLabel(cp, labels = cp$id, method = &quot;buffer&quot;, col = &quot;white&quot;, doPlot=T) lines(railways, lwd = 3,col = &quot;red&quot;) 6.7.2 Finding Intersections Between Two Layers Now that you know which bears crossed the railroad, find out where. You’ll need a user-defined function called points_to_line(), which is stored as a script file in your working directory. If you ever write a function, you can store it in a script file, and then bring it into your current session using the source() function. This prevents you from needing to paste all the function code every time you want to use it in a new script. Save as many functions as you want in a single script, and they will all be added to your Global Environment when you source() the file4. source(&quot;points_to_line.R&quot;) source(&quot;Data/Ch6/points_to_line.R&quot;) source() essentially highlights all the code in a script and runs it, without you ever having to open the script. # {maptools} is needed by points_to_line() library(maptools) # change CRS bear = spTransform(bear, CRS(proj4string(slovenia))) #turn the bear relocations into tracks bearlines = points_to_line( as.data.frame(bear), long=&quot;x&quot;,lat=&quot;y&quot;, id_field=&quot;ID&quot;, sort_field = &quot;timestamp&quot;) Now that your points have been turned into tracks for each bear, see where they intersect using the gIntersection() function from the {rgeos} package. Hang on though, this will take your computer a while to run (between 5 and 20 minutes). You can start a timer as well: start = Sys.time() crossings = gIntersection(bearlines, railways) Sys.time() - start 6.8 Creating a Presentable Map Now that you have a points object with the crossings stored, make a map that you can present to policy makers. THIS PART DOESN’T WORK FOR ME, SEE THE ISSUE library(dismo) library(raster) #the basemap will be stored as a raster object. basemap = gmap(bear, exp=1, type=&quot;terrain&quot;, lonlat = T) plot(basemap) #reproject each layer to the coordinate system of the basemap. bear &lt;- spTransform(bear, basemap@crs) railways &lt;- spTransform(railways, basemap@crs) slovenia &lt;- spTransform(slovenia, basemap@crs) proj4string(crossings) &lt;- basemap@crs points(bear,col=&quot;white&quot;,pch=15,cex=.5) railways &lt;- crop(railways,basemap) plot(railways,add=T,lwd=4,col=&quot;yellow&quot;) plot(crossings,add=T,col=&quot;red&quot;,cex=1,pch=16) box() #scalebar(5000,xy=click(),col=&quot;white&quot;) #legend? #labels? #arrows? Where are bears crossing the railroad? It looks like there are two areas of the railroad that get the most bear activity. Add arrows pointing to where you think the crossings should go. plot(slovenia) plot(railways, add = T, col = &quot;red&quot;) plot(crossings, add = T, pch = 17, col = &quot;blue&quot;) 6.9 Other R Mapping Packages This chapter has covered many of R’s basic mapping capabilities using the built-in plot() functionality, but there are certainly other frameworks in R. Here are a few examples. 6.9.1 {ggmap} Just like for {ggplot2}, many R users find the {ggmap} package more intuitive than creating maps with plot() like you have done in this chapter. Here’s an example: THIS PART DOESN’T WORK FOR ME, SEE THE ISSUE library(ggmap) geocode(&quot;United States&quot;) qmap(location = &quot;boston university&quot;) 6.9.2 {leaflet} This package allows you to make interactive maps. This will only work if your output is HTML-based5 library(leaflet) leaflet() %&gt;% #add a basemap addProviderTiles(providers$Esri.WorldGrayCanvas, group = &quot;Grey&quot;) %&gt;% # change the initial zoom fitBounds(slovenia@bbox[&quot;x&quot;,&quot;min&quot;], slovenia@bbox[&quot;y&quot;,&quot;min&quot;], slovenia@bbox[&quot;x&quot;,&quot;max&quot;], slovenia@bbox[&quot;y&quot;,&quot;max&quot;]) %&gt;% # fill in slovenia addPolygons(data = slovenia, color = &quot;grey&quot;) %&gt;% # draw the railroad addPolylines(data = railways,opacity = 1, color = &quot;red&quot;) %&gt;% # draw the relocations addCircleMarkers(data = bear, color = &quot;blue&quot;, clusterOptions = markerClusterOptions()) %&gt;% # draw the crossing events addCircleMarkers(data = crossings, color = &quot;yellow&quot;, clusterOptions = markerClusterOptions()) Exercise 6 Load the caves.shp shapefile from your working directory (Republic of Slovenia 2018). Add the data to one of the maps of Slovenia you created in this chapter. How many caves are there? How many caves are in each statistical area? Which bear has the most caves in its homerange? 6.10 Exercise 6 Bonus use the… Find some data online for a system you are interested in and do similar activities as shown in this chapter. Good examples for obtaining open access spatial data are: &lt;HELPFUL.WEBSITE.#1&gt; &lt;HELPFUL.WEBSITE.#2&gt; &lt;HELPFUL.WEBSITE.#3&gt; &lt;HELPFUL.WEBSITE.#4&gt; References "]
]
